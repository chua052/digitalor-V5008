#ifndef __MAIN_H__
#define __MAIN_H__



#define  MODBUS_RTU_NETMODE    1
#define  OFFSET				    0X2D000

#define Original_key    //定义使用原始密钥


//华为版本，取消注释，U数按53u计算，其余版本，打开注释，U数以实际为准。
// #define HUAWEI_53U   //华为公司版本（53U一套，不足53U时，报模块损坏）

#define Red_OFF    //无标签时，红灯也灭掉（即无标签则不亮任何灯）

#define _V3_3     //最新V3.4版硬件（不能定义_V3_4 LED用其他宏定义区分）  3.3版硬件（与3.1版或3.2版不兼容）注释掉即匹配3.1或3.2版硬件


#ifndef _V3_3       
	#define _53U
#endif


#ifdef _V3_3      //仅3.3版有两个批次LED
	#define NEW_LED    //3.3版硬件有两种批次的三色LED，脚位不一样
#endif


// #define _V3_4_LED   //定义V3.4版LED

#ifdef _V3_4_LED      //
	#define NEW_LED    //3.4版硬件采用LED灯
#endif

#ifdef _V3_3      //仅3.3版主机才有RTC电路
	#define History_Event   //使能历史信息功能
#endif

#define OCCUPY_ALARM			//是否开启占位报警提示

#ifdef HUAWEI_53U
	#define Err_Report				//是否开启模块损坏上报
#endif

#define ONLINE_BLINK			//是否开启标签在线持续蓝灯闪烁

#define ONE_BEEPER				//一套设备共用一个蜂鸣器（占位报警也应该由主机发声）



#define ERROR_TIME_LIMIT		10 		//(从机无响应次数)

#define TAG_MSG  0
#define ERR_MSG  1
#define LOAD_MSG  2
#define WEIGHT_MSG  3

#include <ctype.h>
//#include <absacc.h>
#include <string.h>
#include "stdlib.h"
//#include <intrins.h>
// #include "net.h"
#include "sys.h"
#include "spi.h"
#include "usart.h"
#include "stm32f10x_dbgmcu.h"





typedef char   			BOOL;		 //int8_t
typedef unsigned char	UCHAR;	  	 //uint8_t
typedef char    		CHAR;		 //int8_t
typedef unsigned short 	USHORT;		 //uint16_t
typedef short   		SHORT;		 //int16_t
typedef unsigned long 	ULONG;		 //uint32_t
typedef long    		LONG;		 //int32_t



// typedef unsigned char  				UCHAR;
typedef unsigned short int 			UINT;
// typedef unsigned int				ULONG;
// typedef unsigned int				LONG;


// #define Heartbt     400    //10S心跳包

#define Heartbt     800    //20S心跳包

#define Ack_Time    400   


#define HBTime      5
				
// #define    LED_Start_Reg   660   // 8字节ID版本
#define    LED_Start_Reg   2000      // 16字节ID版本


#define up 0
#define down 1

//#define    UploadMsg       0XA1    //上传U-WEI信息
//#define    UploadRackMsg   0XA3    //上传机架信息
//#define    ModiRkMsg       0XA5    //修改机架信息
//#define    ModiNetp        0XA7    //修改网络参数
//#define    GetNetp         0XA9    //获取网络参数
//#define    PcCtlLED        0XAB    //控制LED信息
//#define    GetLedSta       0XAC    //上位机获取LED状态
//#define    UploadTick      0XAD    //发送心跳包

//#define    GetTime         0XAF    //获取时间

//#define    GetHisMsg       0XB2    //获取历史事件

//#define    WriteTag        0XB5    //写标签

//#define    UploadModuleErrMsg  0XB7    //上传模块故障信息

//#define    Upload_Pro_Msg  0xC1    //上传运维版U-WEI信息
//#define    UploadDownMsg   0XC3    //上传下架信息

////下面两条指令取消
//#define    UploadWeightMsg     0xC5        //上传承重百分比
//#define    UploadLoadMsg       0xC7    //上传功率负荷百分比


//#define    SetWK_PAR         0xC5    //设置预警参数等

//#define    UploadWKMsg     0xC7    //上传温度等实时信息


//#define    Auth              0xC9    //授权
//#define    UnAuth            0xCB    //解除授权

//#define    UnAuth_Operation   0xCD    //未授权标签被移除
//#define    Tag_Broken        0xCF    //标签被破坏

//#define    To_Update         0XF0    //下发升级指令
//#define    Ready_To_Update   0XF2    //上传设备准备好升级指令
//#define    Update_Pack       0XF4    //下发升级数据包

//#define    UNAUTH_TICK       (40*10) //10秒间隔


//#define    CtrBeep           0xD2     //控制蜂鸣器





#define    UploadMsg       0XE1    //上传U-WEI信息
#define    UploadTick      0XE2    //发送心跳包
#define    UploadRackMsg   0XE3    //上传机架信息
#define    GetLedSta       0XE4    //上位机获取LED状态
#define    GetTime         0XE5    //获取时间
#define    ModiRkMsg       0XE6    //修改机架信息
#define    CtrBeep         0xE7     //控制蜂鸣器
#define    GetHisMsg       0XE8    //获取历史事件
#define    PcCtlLED        0XE9    //控制LED信息


#define    ModbusRTU        0XEA    

//============不变=======================================================================================
#define    ModiNetp        0XA7    //修改网络参数
#define    GetNetp         0XA9    //获取网络参数
#define    To_Update         0XF0    //下发升级指令
#define    Ready_To_Update   0XF2    //上传设备准备好升级指令
#define    Update_Pack       0XF4    //下发升级数据包

//===========无关===============================================================================
#define    WriteTag        0XB5    //写标签
#define    UploadModuleErrMsg  0XB7    //上传模块故障信息
#define    Upload_Pro_Msg  0xC1    //上传运维版U-WEI信息
#define    UploadDownMsg   0XC3    //上传下架信息
//下面两条指令取消
#define    UploadWeightMsg     0xC5        //上传承重百分比
#define    UploadLoadMsg       0xC7    //上传功率负荷百分比
#define    SetWK_PAR         0xC5    //设置预警参数等
#define    UploadWKMsg     0xC7    //上传温度等实时信息
#define    Auth              0xC9    //授权
#define    UnAuth            0xCB    //解除授权
#define    UnAuth_Operation   0xCD    //未授权标签被移除
#define    Tag_Broken        0xCF    //标签被破坏


#define    UNAUTH_TICK       (40*10) //10秒间隔







#define PC_CTRL_BEEP_MODE   1
#define PC_CTRL_BEEP_CLOSE   255


extern uint16_t Send_UnAuth_Delay;
extern uint8_t To_Write_Auth;
extern uint8_t AuthenBuf[];
extern uint8_t UnAuthenBuf[];

extern uint16_t WK_Info_int;
extern uint16_t Set_Int;
extern uint16_t Total_Weight;
extern uint16_t Total_Power_Comsuption;
extern uint8_t UW_Hight[];
extern uint8_t Last_Up_Pos ;
extern uint8_t Last_Down_Pos;
extern uint8_t Curr_Slave_Data; //记录主机当前存储的是哪个从机的标签数据
extern uint8_t Wait_Slave_Data;
extern uint8_t To_Send_Next[];
extern uint8_t Send_Times;
extern uint8_t Cur_Module;
// extern uint8_t IC_Data[14][48];

typedef __packed struct
{
	uint16_t Engage;               //本段地址写入内容标识
	uint16_t Year;		             // 年;
	uint8_t month;	               // 月
	uint8_t date;	                 // 日
	uint8_t hour;		               // 时
	uint8_t min;	                 // 分
	uint8_t second;	               // 秒
	uint8_t UP_DOWN;               // 上线还是下线
	uint8_t Msg[34];               // 标签信息
}_Single_His;

typedef __packed struct          //工作参数
{	
	uint16_t Cur_Wt;               //当前在架资产总重量
	uint16_t Cur_Pr;               //当前在架资产总功率
	uint16_t Cur_Tp[9];           //当前机架温度	
}_Cur_Val;         

typedef __packed struct          //工作参数
{
	uint16_t Time_Int;             //信息上传间隔时间
	
	uint16_t Al_Wt;                //允许总重量
	uint16_t War_Wt;		           //预警总重量
	
	uint16_t Al_Pr;	               //允许总功率
	uint16_t War_Pr;	             //预警总功率
	
	uint16_t Al_Tp;                //允许最高温度
	uint16_t War_Tp;		           //预警温度
	
	_Cur_Val Current_Val;          //当前值
	
}_WK_Par;                        



// extern _Single_His Single_His[24];

// typedef __packed struct
// {
// 	uint32_t Store;
// 	_Single_His Single_His[24];
// }_His_Page;



typedef __packed struct
{
	uint8_t Header[2];		        // 起始码 两字节0xfe;
	uint8_t Datlen[2];	          // 后续数据长度
	uint8_t COM[1];	              // 命令码
	uint8_t VerNo[2];             // 设备版本号
	uint8_t ID[4];                // 设备ID
	uint8_t DatTR[800];          // 收发数据 
}TCPDat;



typedef  __packed struct
{
	uint8_t SN[32];
	uint8_t UW_High[1];		
	uint8_t Location[32];
	uint8_t Building[32];
	uint8_t Storey[8];
	uint8_t Room[8];
	uint8_t Row[8];
	uint8_t Rack_No[16];
	uint8_t Description[32];
	uint8_t Manufacturer[16];
	uint8_t Serial_No[16];
	uint8_t Vendor[16];
	uint8_t MAC1[6];
	uint8_t MAC2[6];
	uint8_t Life_circle[8];
	uint16_t Weight;
	uint8_t Maintenance_cycle[8];
	uint8_t Person_in_charge[16];
	uint8_t Service_Contact[48];
	uint8_t Device[32];
	uint8_t Device_Class[16];
	uint8_t Inventory_Code[32];
	uint16_t Power_Consumption;
	uint16_t Current_Rating;
	uint16_t Rated_voltage;
	uint8_t Last_Service[48];
	uint8_t Next_Service[48];
	uint8_t Last_Update[16];
	uint8_t Next_Update[16];	
	uint8_t First_commissioned[16];
	uint8_t Additional[131];
	uint8_t Supervisory;//监控 如果为1标签拿走会报警
	//待加双界面断线检测
	
	
	
}TagDaT;


typedef __packed struct
{
	uint8_t UW_High[6];		        // 20151120  采集信息中，提交资产占用U位高度
	uint64_t CardID[6][2];	    //卡号  20151102 HW需要21个数字字母组合，故改为32字节自定义卡号
	uint64_t CardID_EXT[6][2];	//卡号	20151102 HW需要21个数字字母组合，故改为32字节自定义卡号
}ReaderDaT;

typedef __packed struct
{
	uint8_t  UW_Num;		   //40020 L
	uint8_t  UW_High;		   //40020 H
	uint64_t RFID_ID[2];		   //40021 - 40014
	uint64_t RFID_ID_EXT[2];  //20150727，将ID扩展为16字节，ASCII码表示
														//20151102，将ID扩展为32字节，ASCII码表示
}UW_DaT;

typedef __packed struct
{
	uint16_t Vision;		//40001 		版本号
	uint32_t ControlID;		//40002 - 40003 控制器ID
	uint16_t RS485_Addr;	//40004 		地址
	uint8_t  UW_Count;		//40005 L 		U位数量
	uint8_t  MK_Count;		//40005 H 		模块数量
	uint16_t UW_Updata;		//40006 		U位数据变化编码
	uint8_t  UW_Num;		//40007 L		U位号
	uint8_t  UW_High;		//40007 H		U位高度
	uint64_t RFID_ID[2];		//40008 - 40011 最近一次变化RFID标签ID
	uint64_t RFID_ID_EXT[2];  //20151102，将ID扩展为32字节，ASCII码表示
	uint16_t UW_Up[8];		//40012 - 40019 1-128U位上架信息
	uint8_t  UW_DaStart;	//40020			U位信息开始位
}RTU_DaT;


// typedef __packed struct
// {
// 	uint16_t u16_HL[1024];
// }SWAP_DaT;


// typedef union 
// {
// 	__IO uint8_t u8Dat;
// 	struct 
// 	{
// 		__IO uint8_t Bit0:1;	//
// 		__IO uint8_t Bit1:1;	//
// 		__IO uint8_t Bit2:1;	//
// 		__IO uint8_t Bit3:1;	//
// 		__IO uint8_t Bit4:1;	//
// 		__IO uint8_t Bit5:1;	//
// 		__IO uint8_t Bit6:1;	//
// 		__IO uint8_t Bit7:1;	//
// 	} Dat_Bit;
// } Dat_UN;


#define LED_On				0x01		//LED灯发光
#define LED_Off				0x00		//LED灯关闭

#define LED_Quit			0x00		//LED退出控制
#define LED_Close			0x01		//LED关闭
#define LED_At_Blue			0x02		//LED一直蓝灯
#define LED_At_Red			0x03		//LED一直红灯
#define LED_At_R_B			0x04		//LED一直红蓝灯
#define LED_Fl_Blue			0x05		//LED蓝灯闪烁
#define LED_Fl_Red			0x06		//LED红灯闪烁
#define LED_Fl_R_B			0x07		//LED红蓝灯闪烁

#define LED_At_Green		0x08		//LED一直绿灯
#define LED_At_R_G		  0x09		//LED一直红绿灯
#define LED_At_B_G      0x0A		//LED一直蓝绿灯
#define LED_At_ALL			0x0B		//LED一直全亮
#define LED_Fl_Green		0x0C		//LED绿灯闪烁
#define LED_Fl_R_G			0x0D		//LED红绿灯闪烁
#define LED_Fl_B_G			0x0E		//LED蓝绿灯闪烁
#define LED_Fl_ALL			0x0F		//LED一直全闪


//20150304
//#define Sys_GetSlCnt_Dly	200			//25ms*200=5s
#define Sys_GetSlCnt_Dly	10			//25ms*10=250MS
#define Sys_UW_Count		6			//默认有6U位
// #define Sys_MK_Count		8			//最多支持连接模块数量
#define Sys_MK_Count		9			//最多支持连接模块数量  20151123




// #ifdef HUAWEI_53U	
// 	#define Sys_Vision			0x3508		//版本8 20160902  //高字节53表示53U版本，HW定制
// // 	#define Sys_Vision			0x3614		//测试版本
// #else
// 	#define Sys_Vision			0x2A08		//版本8 长沙测评中心V2A08版本号
// #endif

#define Sys_Vision			0x2A64   //Pro版，版本号64

/***************** IO口定义 **********************/
/*485发送使能管脚定义*/
#ifdef  _V3_3
	#define IO_EN485_1		GPIO_Pin_6		//PB.6
	#define IO_EN485_2		GPIO_Pin_1		//PA.1
	#define IO_EN485_3		GPIO_Pin_1		//PB.1	
#else   //3.1或3.2版硬件
	#define IO_EN485_1		GPIO_Pin_8		//PB.8
	#define IO_EN485_2		GPIO_Pin_1		//PA.1
	#define IO_EN485_3		GPIO_Pin_1		//PB.1
#endif	


//===通过595切换
// /*HRF-SW1030 RF切换管脚定义*/
// #define IO_SW1030_C0	GPIO_Pin_7		//PB.7
// #define IO_SW1030_C1	GPIO_Pin_8		//PB.8
// #define IO_SW1030_C2	GPIO_Pin_9		//PB.9

#ifdef NEW_LED
	/*LED灯 管脚定义*/
	#ifdef _V3_4_LED
		#define LED1_Blue	  5	  // 输出--检测灯1
		#define LED1_Red	  4	  // 输出--检测灯1
		#define LED1_Green	6	  // 输出--检测灯1
		
		#define LED2_Blue	  8	  // 输出--检测灯2
		#define LED2_Red	  7	  // 输出--检测灯2
		#define LED2_Green	9	  // 输出--检测灯2
		
		#define LED3_Blue	  11	// 输出--检测灯3
		#define LED3_Red	  10	// 输出--检测灯3
		#define LED3_Green	12	// 输出--检测灯3
		
		#define LED4_Blue	  14	// 输出--检测灯4
		#define LED4_Red	  13	// 输出--检测灯4
		#define LED4_Green	15	// 输出--检测灯4
		
		#define LED5_Blue	  17	// 输出--检测灯5
		#define LED5_Red	  16  // 输出--检测灯5
		#define LED5_Green	18	// 输出--检测灯5
		
		#define LED6_Blue	  20	// 输出--检测灯6
		#define LED6_Red	  19	// 输出--检测灯6
		#define LED6_Green	21	// 输出--检测灯6
	#else
		#define LED1_Blue	  6	  // 输出--检测灯1
		#define LED1_Red	  4	  // 输出--检测灯1
		#define LED1_Green	5	  // 输出--检测灯1
		
		#define LED2_Blue	  9	  // 输出--检测灯2
		#define LED2_Red	  7	  // 输出--检测灯2
		#define LED2_Green	8	  // 输出--检测灯2
		
		#define LED3_Blue	  12	// 输出--检测灯3
		#define LED3_Red	  10	// 输出--检测灯3
		#define LED3_Green	11	// 输出--检测灯3
		
		#define LED4_Blue	  15	// 输出--检测灯4
		#define LED4_Red	  13	// 输出--检测灯4
		#define LED4_Green	14	// 输出--检测灯4
		
		#define LED5_Blue	  18	// 输出--检测灯5
		#define LED5_Red	  16  // 输出--检测灯5
		#define LED5_Green	17	// 输出--检测灯5
		
		#define LED6_Blue	  21	// 输出--检测灯6
		#define LED6_Red	  19	// 输出--检测灯6
		#define LED6_Green	20	// 输出--检测灯6	
	#endif
#else
	/*LED灯 管脚定义*/
	#define LED1_Blue	  4	  // 输出--检测灯1
	#define LED1_Red	  5	  // 输出--检测灯1
	#define LED1_Green	6	  // 输出--检测灯1
	#define LED2_Blue	  7	  // 输出--检测灯2
	#define LED2_Red	  8	  // 输出--检测灯2
	#define LED2_Green	9	  // 输出--检测灯2
	#define LED3_Blue	  10	// 输出--检测灯3
	#define LED3_Red	  11	// 输出--检测灯3
	#define LED3_Green	12	// 输出--检测灯3
	#define LED4_Blue	  13	// 输出--检测灯4
	#define LED4_Red	  14	// 输出--检测灯4
	#define LED4_Green	15	// 输出--检测灯4
	#define LED5_Blue	  16	// 输出--检测灯5
	#define LED5_Red	  17  // 输出--检测灯5
	#define LED5_Green	18	// 输出--检测灯5
	#define LED6_Blue	  19	// 输出--检测灯6
	#define LED6_Red	  20	// 输出--检测灯6
	#define LED6_Green	21	// 输出--检测灯6
#endif



#define	IO_HC595_SCK	GPIO_Pin_5
#define	IO_HC595_OE   GPIO_Pin_3
#define	IO_HC595_SDI	GPIO_Pin_15
#define	IO_HC595_RCK	GPIO_Pin_4



/***************** IO输入输出定义 **********************/
/*485发送使能管脚定义*/
//已改
#ifdef  _V3_3
	#define EN485_1		PBout(6)	// 输出--RS485控制线
	#define EN485_2		PAout(1)	// 输出--RS485控制线
	#define EN485_3		PBout(1)	// 输出--RS485控制线
#else   //3.1或3.2版硬件
	#define EN485_1		PBout(8)	// 输出--RS485控制线
	#define EN485_2		PAout(1)	// 输出--RS485控制线
	#define EN485_3		PBout(1)	// 输出--RS485控制线
#endif


#ifdef  _V3_3
	/*磁感应检测输入 管脚定义*/
//	#define IO_Tout1		GPIO_Pin_13		//PC.13
	#define IO_Tout1		GPIO_Pin_9		//PC.13
	#define IO_Tout2		GPIO_Pin_9		//PB.9
	#define IO_Tout3		GPIO_Pin_8		//PB.8
	#define IO_Tout4		GPIO_Pin_7		//PB.7
	#define IO_Tout5		GPIO_Pin_12	  //PA.12
	#define IO_Tout6		GPIO_Pin_11		//PA.11
	/*磁感应检测输入 管脚定义*/
//	#define Tout1		PCin(13)		// 输入--磁感应线1
	#define Tout1		PCin(9)		// 输入--磁感应线1
	#define Tout2		PBin(9)		  // 输入--磁感应线2
	#define Tout3		PBin(8)		  // 输入--磁感应线3
	#define Tout4		PBin(7)		  // 输入--磁感应线4
	#define Tout5		PAin(12)	  // 输入--磁感应线5
	#define Tout6		PAin(11)	  // 输入--磁感应线6
#else   //3.1或3.2版硬件
	//已改
	/*磁感应检测输入 管脚定义*/
	#define IO_Tout1		GPIO_Pin_13		//PC.13
	#define IO_Tout2		GPIO_Pin_14		//PC.14
	#define IO_Tout3		GPIO_Pin_15		//PC.15
	#define IO_Tout4		GPIO_Pin_9		//PB.9
	#define IO_Tout5		GPIO_Pin_12	  //PA.12
	#define IO_Tout6		GPIO_Pin_11		//PA.11

	//已改
	/*磁感应检测输入 管脚定义*/
	#define Tout1		PCin(13)		// 输入--磁感应线1
	#define Tout2		PCin(14)		// 输入--磁感应线2
	#define Tout3		PCin(15)		// 输入--磁感应线3
	#define Tout4		PBin(9)		  // 输入--磁感应线4
	#define Tout5		PAin(12)	  // 输入--磁感应线5
	#define Tout6		PAin(11)	  // 输入--磁感应线6
#endif




#define	Bell_ON             Dat_Lth&=(~(1<<0))
#define Bell_OFF          	Dat_Lth|=(1<<0)  


// #define E_self_addr			0		//本机地址
// #define E_rs485_mode		1		//485通信模式（0主动或1被动）发卡号
// #define E_logo_mode			2		//Logo显示模式，0--默认，1--自定义
// #define E_wgbits			3		//韦根位数：26/34/66
// #define E_english_week		4		//英文星期显示
// #define E_cal_mode			5		//算法模式，0--国密，1--3DES
// #define E_Lenth				0x06	//参数长度



/* ----------------------- Holding register Defines ------------------------------------------*/

// #define REG_HOLDING_START_1 0001
// #define REG_HOLDING_NREGS_1 847           //(48U 16字节版本)

// #define REG_HOLDING_START_2 2001
// #define REG_HOLDING_NREGS_2 48            //(48U 16字节版本)

// #define REG_HOLDING_START_3 3001
// #define REG_HOLDING_NREGS_3 7            //(IP地址、子网掩码、默认网关、端口号)

//====20151123  53U版本
#define REG_HOLDING_START_1 0001

// #define REG_HOLDING_NREGS_1 949           //(53U 32字节版本 实际给出54U寄存器范围 )

#define REG_HOLDING_NREGS_1 30

#define REG_HOLDING_START_2 2001
#define REG_HOLDING_NREGS_2 54            //(53U 32字节版本  实际给54个U的LED)

#define REG_HOLDING_START_3 3001
#define REG_HOLDING_NREGS_3 10            //(IP地址、子网掩码、默认网关、端口号等)

#define REG_HOLDING_START_4 3201
#define REG_HOLDING_NREGS_4 100            //(掉电保存区域内容)


/* ----------------------- input register Defines ------------------------------------------*/
#define REG_INPUT_START 0000
#define REG_INPUT_NREGS 16

/* ----------------------- coils register Defines ------------------------------------------*/
#define REG_COILS_START     0000
#define REG_COILS_SIZE      16

/* ----------------------- discrete register Defines ------------------------------------------*/
#define REG_DISC_START     0000
#define REG_DISC_SIZE      16


#ifdef Err_Report
extern uint8_t Err_Time[];
#endif

extern uint8_t moni_alm;
extern uint8_t Monitor_ALM[];
extern uint16_t UW_Weight[];
extern uint16_t UW_Power[];
extern uint8_t Store[];
extern uint8_t Up_Send_Flag[];
extern TagDaT TagData[];
extern uint8_t ReREAD_Slave_TAG;
extern uint8_t Reboot_Slave_Flag;
extern uint32_t Colour_Light_Ticks;
//extern uint16_t Interval ;
extern uint32_t Interval  ;

extern uint8_t SyncLed;
// extern _His_Page His_Page[3];
extern uint8_t LINK_ESTABLISHED;
extern uint8_t link;
extern uint16_t  His_ONLine[];
extern uint8_t Link_First;
extern uint16_t PowerUpTime;
extern uint8_t Stop_Colour_Light;
extern uint8_t HeartbeatTime;
extern uint8_t Wait_ACK[];
extern uint16_t Ack_Tick[] ;
extern uint8_t NO_SLAVE;
extern uint16_t Heartbeat_packet; 

// extern uint8_t TcpSendBuf[];

extern _WK_Par WK_Cur_Val;  //设置值及当前值
extern TCPDat *pTCPDa;
extern uint8_t First_Send;
extern uint16_t fifo_pop_delay;
// extern uint16_t Up_BAK[8];  //20151203  备份上架信息，有变化则主动上报 
// extern uint16_t Up_BAK_OLD[8];  //20151203  备份上架信息，有变化则主动上报
extern uint32_t No_Connection_Tick;
// extern uint8_t LedCtl_InProcess;
extern uint8_t Host_Addr;			//本机地址
extern uint8_t Slave_Addr;			//从机地址
// extern uint8_t SlaveCnt;			//从机数量
extern uint8_t UW_Cnt;				//U位数量
extern uint8_t UW_Sta;				//U位状态
// extern uint8_t Sys_Para[];
extern uint8_t GetDat_Pos;			//切换获取卡号
extern uint8_t GetLed_Sta;      //切换获取LED状态
extern uint8_t TrsLed_Sta;      //切换下发LED状态

// extern uint8_t Response_Delay;

extern volatile ReaderDaT ReaderDa[];
// extern uint16_t Tim_GetSlCnt_Dly;	//获取从机数量延时

extern RTU_DaT *pRTU_Da;
extern UW_DaT *pUW_Da;
extern uint8_t Sys_UW_Cnt[];		//系统从机U位数量
extern uint8_t Sys_UW_Num[];		//系统U位高度
extern uint8_t Sys_MK_Cnt_New;		//系统模块最新数量
extern uint8_t Sys_MK_Cnt_Old;		//系统模块上次数量
extern uint8_t Sys_UW_Sta_New[];	//系统U位最新状态
extern uint8_t Sys_UW_Sta_Old[];	//系统U位上次状态
extern uint32_t Sys_SerialNum;		//系统序列号
extern uint16_t Sys_RS485Addr;		//系统RS485地址
extern uint8_t Ud_UW_Num;			//最新一次U位号
extern uint8_t Ud_UW_High;			//最新一次U位高度
extern uint64_t Ud_RFID_ID[2];			//最新一次RFID标签ID
extern uint64_t Ud_RFID_ID_EXT[2];			//最新一次RFID标签ID扩展8字节
extern uint16_t Ud_UW_Updata;		//U位数据变化编码

// extern uint8_t ReadDaCnt[6];			//读取数据次数
extern uint8_t SenFlag[6];				//磁感应标志1~6
extern uint8_t RdFlag[6];				  //已读卡标志1~6
extern uint8_t WtFlag[6];         //已写权限标志1~6
extern uint8_t UpFlashFg[6];			//上线闪灯标志1~6
extern uint8_t DnFlashFg[6];			//下线闪灯标志1~6
extern uint8_t DyFlashFg[6];			//动态闪灯标志1~6
extern uint8_t FlashVal[6];				//闪灯值1~6
extern uint8_t UpFlashDly[6];			//上线闪光控制延时

extern uint8_t DnFlashDly[6];			//下线闪光控制延时		//20140808

extern uint8_t DyFlashDly[6];			//动态闪光控制延时
extern uint8_t DyFlashPos[6];			//动态闪光灯号
extern uint8_t DyFlashClr[6];			//动态闪光灯颜色

extern uint8_t Tim_IWDG_Cnt;			//看门狗喂狗轮询计数器
extern uint8_t Tim_Read_Cnt;			//读卡循环计数器
extern uint8_t Tim_Check_Cnt;		//检查磁感应计数器
extern uint8_t Tim_Flash_Cnt;		//上线闪光计数器
extern uint8_t Tim_GetCd_Cnt;		//获取下位机数据计数器
extern uint8_t Tim_SetAd_Cnt;		//设置下位机地址计数器




// extern uint16_t power_up;
extern uint8_t LED_STATUS[];

extern uint8_t LED_STATUS_DOWNLOAD[];

extern uint32_t Dat_Lth;
extern uint8_t UnitResponse;

// // 输入寄存器内容
// extern uint16_t usRegInputBuf[REG_INPUT_NREGS];
// // 寄存器起始地址
// uint16_t usRegInputStart = REG_INPUT_START;
// 保持寄存器内容
extern uint16_t usRegHoldingBuf1[REG_HOLDING_NREGS_1] ;
// extern uint16_t usRegHoldingBuf2[REG_HOLDING_NREGS_2] ;
extern uint16_t usRegHoldingBuf3[REG_HOLDING_NREGS_3] ;

extern uint16_t usRegHoldingBufBkp3[REG_HOLDING_NREGS_3] ;

// // // 保持寄存器起始地址
// // uint16_t usRegHoldingStart = REG_HOLDING_START;
// // 线圈状态
// extern uint8_t ucRegCoilsBuf[REG_COILS_SIZE / 8] ;
// // 开关状态
// extern uint8_t ucRegDiscBuf[REG_DISC_SIZE / 8] ;

void read_Para(void);
void Save_Para(void);
void read_card(uint8_t reader_pos);
void FlashLight(uint8_t LightPos, uint8_t LightColor);
void Write_Autn(uint8_t reader_pos,uint8_t auth);
void Send_HeartBeat(void);
uint8_t Cal_bit1(uint8_t t);
uint8_t Cal_Pos(uint8_t U_Num);







#define RST_NET_IO		GPIO_Pin_0		
#define ID_Bus_IO		GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11 | \
						GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15						
#define ID_GPIO			GPIOB
#define RST_NET			PAin(0)	// PA0输入 

#define Big2Little16(A)  ((((u16)(A) & 0xff00) >> 8) | \
                                 (((u16)(A) & 0x00ff) << 8))

#define Big2Little32(A)  ((((u32)(A) & 0xff000000) >> 24) | \
                                  (((u32)(A) & 0x00ff0000) >> 8) | \
                                  (((u32)(A) & 0x0000ff00) << 8) | \
                                  (((u32)(A) & 0x000000ff) << 24))

#define Little2Big16(A)  ((((u16)(A) & 0xff00) >> 8) | \
                                 (((u16)(A) & 0x00ff) << 8))

#define Little2Big32(A)  ((((u32)(A) & 0xff000000) >> 24) | \
                                  (((u32)(A) & 0x00ff0000) >> 8) | \
                                  (((u32)(A) & 0x0000ff00) << 8) | \
                                  (((u32)(A) & 0x000000ff) << 24))

#define CACHESIZE			2	// 10 ARP cache
#define CACHETIME			20	// expiration time = 20 minutes. 60 second intervals
#define ARP_TIMEOUT	 		4	// Allow 2 seconds to receive an ARP reply, 0.5 second intervals
#define MAC_LEN				6
#define IP_LEN				4

//==========falsh相关地址设置==================
#define STM32_FLASH_SIZE 	256 	 		//所选STM32的FLASH容量大小(单位为K)
#define STM_SECTOR_SIZE		2048 			//每页含有字节

#define		STM32_FLASH_BASE		0x08000000 		//STM32 FLASH的起始地址    0x08000000  - 0x0803 FFFF
													//  0x08000000  - 0x0803 C000   预留240k放代码    后续空间  0x803C000  - 0x0803 FFFF

//==W5500相关==   预留32个字节    0x0803C010   -  0x0803C030
#define		W5500_MAC			0x0803C010      //BB-BB-CC-CC-DD-DD
#define		W5500_LOCAL_IP		0x0803C016		//192.168.0.178     0xC0 A8 00 B2
#define		W5500_GW_IP			0x0803C01A		//192.168.0.1		
#define		W5500_SUB			0x0803C01E		//255.255.0.0
#define		W5500_DNS			0x0803C023		//8.8.8.8






u8 FlashWriteData(u32 WriteAddr,const u8 *pBuffer,u16 NumToWrite);		//从指定地址开始写入指定长度的数据
u8 FlashReadData(u32 ReadAddr,u8 *pBuffer,u16 NumToRead);   		//从指定地址开始读出指定长度的数据

/*************************************************************************************/

/*********************************************************************
网络基本参数	数据类型定义
*********************************************************************/
typedef struct			 					
{
	UCHAR StartFlag;				//预留位	1  默认:
	UCHAR SetupHead_buf[32];		//引导码	16 默认:0x55 0xAA
//	UCHAR SetupFalg_buf[16];		//标志码	16 默认:0xff
	UCHAR Name_len;					//主机名长	1  默认:5
	UCHAR Name_buf[15];				//主机名字	15 默认:host1 
	UCHAR IP_mode;					//ip 模式  	1  默认:0
	UCHAR MAC_Local_buf[6]; 		//本地MAC	6  默认:00-AB-CC-65-DE-AA
	UCHAR IP_Local_buf[4];			//本地 IP	4  默认:192.168.1.111 
	UCHAR Sub_Mask_buf[4];			//子网掩码	4  默认:255.255.255.0
	UCHAR Gate_Way_buf[4];			//默认网关	4  默认:192.168.1.1 
	UCHAR IP_Remote_buf[4];			//远程 IP	4  默认:192.168.1.100 
	UINT  Port_Local;				//本地端口	2  默认:50000
	UINT  Port_Remote;				//远程端口	2  默认:50000
	UCHAR Reserve_buf[64];			//预留字节  64
	UCHAR Baud_Select;				//波特率	1
	UCHAR VerCode_buf[7];			//软件版本	7
	UINT  Check_Sum;				//校验和值	2 =150(共)
}Setup_Parameter;

extern Setup_Parameter NetParameter;

#define FLASH_FLAG_NUM      	10      // 标志所占字节数为10个字节 
#define NET_PARA_LEN        	150     // 参数长度
#define END_PARA              141		// 300 结束参数
#define CONFIG_PORT     		  65534   // 广播配置端口

//原DM9000AEP网卡芯片下参数
// /****************** (IP包中)配置报文信息位置*************************/
// #define UDP_DATA_START  		28      /* 28 = 20(IP头) + 8(UDP头) */
// #define COMMAND_START_ADDR      60      /* 配置报文命令位置 */
// #define SAVE_OK                 61      /* 保存成功 */
// #define EQUNAME_LEN             61      /* 1个字节,名字长度 */
// #define EUQ_NAME                62      /* 15个字节作为名字空间 */
// #define IP_MODE                 77      /* 1个字节,IP模式 */
// #define MAC_ADDR                78      /* 6个字节,MAC地址 */
// #define IP_ADDR                 84      /* 4个字节,本地IP地址 */
// #define NET_MASK                88      /* 4个字节,子网掩码 */
// #define GATE_WAY                92      /* 4个字节,网关 */
// #define REMOTE_IPADDR1          96      /* 4个字节,远程IP1 */
// #define LOCAL_PORT1             100     /* 2个字节,本地端口号 */
// #define REMOTE_PORT1            102     /* 2个字节,远程端口号1 */


//现W5500芯片下参数
/****************** (IP包中)配置报文信息位置*************************/
#define UDP_DATA_START  		28      /* 28 = 20(IP头) + 8(UDP头) */
#define COMMAND_START_ADDR      32      /* 配置报文命令位置 */
// #define SAVE_OK                 61      /* 保存成功 */

#define EQUNAME_LEN             33      /* 1个字节,名字长度 */


// #define EUQ_NAME                62      /* 15个字节作为名字空间 */
// #define IP_MODE                 77      /* 1个字节,IP模式 */
#define MAC_ADDR                50      /* 6个字节,MAC地址 */
// #define IP_ADDR                 84      /* 4个字节,本地IP地址 */
// #define NET_MASK                88      /* 4个字节,子网掩码 */
// #define GATE_WAY                92      /* 4个字节,网关 */
// #define REMOTE_IPADDR1          96      /* 4个字节,远程IP1 */
// #define LOCAL_PORT1             100     /* 2个字节,本地端口号 */
// #define REMOTE_PORT1            102     /* 2个字节,远程端口号1 */



// /* 保留64个字节 */
// #define BAUND_RATE              168     /* 1个字节,波特率 */

/* 保留64个字节 */
//20160831   下面波特率并无使用
#define BAUND_RATE              107     /* 1个字节,波特率 */

/* 保留32个字节 */
#define RUN_DAYS                201     /* 2个字节,运行天数 */
#define RUN_HOURS               203     /* 1个字节,小时数 */
#define RUN_MINUTES             204     /* 1个字节,分钟数 */
#define RUN_SECONDS             205     /* 1个字节,秒数 */
#define UDP_RCV_BYTES           206     /* 4个字节,UDP接收字节数 */
#define UDP_SEND_BYTES          210     /* 4个字节,UDP发送字节数 */
#define UART_RCV_BYTES          214     /* 4个字节,串口接收字节数 */
#define UART_SEND_BYTES         218     /* 4个字节,串口发送字节数 */
#define UART_RCV_SOFT_OVERFLOW  222     /* 4个字节,串口接收软件溢出 */
#define UART_SEND_SOFT_OVERFLOW 226     /* 4个字节,串口发送软件溢出 */
#define HARD_SOFT_EIDTION       230     /* 7个字节版本号,ASCII码 */
/* 保留100个字节 */

/******************* PC 配置命令 ************************************/
#define BROADCAST_SEARCH        0x00                /* 广播搜索 */
#define CONFIG_REQUEST          0x02                /* 请求配置 */
#define SAVE_NET_CONFIG         0x04                /* 保存网口配置 */
#define REFLESH_STATISTIC       0x06                /* 刷新统计信息 */
#define CLEAR_STATISTIC         0x08                /* 清零统计信息请求 */
#define RESET_SYSTEM            0x0A                /* 复位系统 */
#define CHANGE_MAC_ADDR			0xA4				/* 更改 MAC 地址 */
/******************* 回复 PC 命令 **********************************/
#define REPLY_BROADCAST         0x01                /* 广播搜索回应 */
#define REPLY_CONFIG            0x03                /* 配置请求回应 */
#define REPLY_SAVE_NETCONFIG    0x05                /* 保存网口配置回应 */
#define REPLY_FLESH             0x07                /* 刷新应答 */
#define REPLY_CLEAR_STATISTIC   0x09                /* 清零统计信息应答 */
#define REPLY_CHANGE_MAC_ADDR	0xA5				/* 更改 MAC 地址 */
//********************************************************************


extern UCHAR debug;						//=1，启动半主机调试
extern UCHAR Sending;
extern UCHAR RxBegin;
extern UCHAR RxDelay;
extern UINT  RxDataCnt;
extern UINT  TxDataCnt;
// extern UINT  Com_Send_Len;
// extern UINT  Com_Recv_Len;
// extern UCHAR Com_Recv_Buf[];
// extern UCHAR Com_Send_Buf[];

extern UCHAR bc_mac[]; 
extern UCHAR my_mac[];
extern ULONG my_ipaddr;
extern ULONG my_subnet;
extern ULONG gw_ipaddr;
extern ULONG remote_ip;
extern UINT  remote_port;
extern UINT  self_port;

extern UCHAR rx_Packet_data[];
extern UCHAR tx_Packet_data[];

extern UINT times_3s;
extern UINT  RandCnt;			//随机数产生种子序列


extern UCHAR arpbuf[];
extern ULONG initial_sequence_nr;
extern UCHAR volatile event_word;
// extern WAIT  wait;
// extern CONNECTION conxn[];
// //extern char  html_header[];
// //extern char  web_page[];
// //extern char  jpeg_header[];
// //extern UCHAR photo1_jpeg[];
// //extern UCHAR BaudRate_buf[8];
// extern ARP_CACHE arp_cache[CACHESIZE];

// extern u16 Com_Recv_Len;
// extern u16 Com_Send_Len;
// extern u8  Com_Recv_Buf[RECV_MAX];
// extern u8  Com_Send_Buf[SEND_MAX];



// void InitSerial(void);
void InitPara(void);

//如果想串口中断接收，请不要注释以下宏定义
void uart_init(u32 bound);				//串口中断接收
void serial_send(UCHAR *base);				//
void udp_to_rs232(UCHAR *base, UINT size);	//
void rs232_to_udp(void);
void send_data(u8 *outdata, u16 size);

void IOWR(UCHAR Channel, UCHAR OutData);
UCHAR IORD(void);


int FlashCheck(void);
void FlashInit(void);
void ResetSystem(void);
void init_arp(void);			//初始化ARP
// UINT cal_crc(UCHAR *ptr, UINT len);
// UINT cksum(UCHAR *check, UINT length); //计算校验和


UCHAR rcve_frame(void);
void send_frame(UCHAR *, UINT);
void eth_rcve(UCHAR *);
void eth_send(UCHAR *, UCHAR *, UINT, UINT);
void ip_send(UCHAR *, ULONG, UCHAR, UINT);
void config_ip_send(UCHAR *, ULONG, UCHAR, UINT);
void ip_rcve(UCHAR *);
void init_arp(void);
UCHAR *arp_resolve(ULONG);
void arp_send(UCHAR *, ULONG , UCHAR );
void arp_rcve(UCHAR *);
void age_arp_cache(void);
void arp_retransmit(void);
void ping_send(UCHAR *, ULONG, UINT);
void dest_unreach_send(UCHAR *, ULONG);
void icmp_rcve(UCHAR *, UINT);
void udp_send(UCHAR *, UINT, UINT);
void udp_rcve(UCHAR *, UINT);
void init_tcp(void);
void init_http(void);
void init_type(void);
void tcp_send(UINT, UINT, UCHAR);
void tcp_rcve(UCHAR *,UINT);
void tcp_retransmit(void);
void tcp_inactivity(void);
UINT http_server(UCHAR *, UINT, UCHAR, UCHAR);
void ConfigParameter(UCHAR *inbuf, UINT len);


void Create_UP_His_Msg(void);
void Create_DOWN_His_Msg(void);
#endif


